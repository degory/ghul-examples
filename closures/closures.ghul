use IO.Std.write_line;
use Collections.LIST;

entry() is
    // f is an anonymous function:
    let f = (i: int) => i * 2;

    // its type is int -> int
    assert f.get_type() == typeof int -> int;

    // it returns its integer argument times two:
    assert f(123) == 123 * 2;

    for i in 1::10 do
        write_line("f({0}) = {1}", [i, f(i)]: object);
    od

    // list_of_gs is a list of 2-tuples, each one having an integer and a function element:
    let list_of_gs = new LIST[(i: int, g: () -> int)]();

    for i in 1::10 do
        // create a function that captures a value - in this case the loop variable i
        let g = () => i;

        // g is a parameterless function that returns an int:
        assert g.get_type() == typeof () -> int;

        // when we call g, it returns the value of i when g was created:
        assert g() == i;

        // store that function in our list for use later:
        list_of_gs.add((i, g));

        // the last value in the list is the tuple we just added:
        assert list_of_gs[list_of_gs.count-1] == (i, g);
    od

    for ig in list_of_gs do
        // each saved g still returns the same value of i that
        // it captured when it was created:
        assert ig.i == ig.g();

        write_line("g that captured i when it was {0} is a {1} that returns {2}", [ig.i, ig.g, ig.g()]);
    od

si
